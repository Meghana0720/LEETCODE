/**
 * @param {string} s
 * @param {string} p
 * @return {boolean}
 */
var isMatch = function(s, p) {
    let m = s.length, n = p.length;
    let dp = Array(m + 1).fill(false).map(() => Array(n + 1).fill(false));

    // Base case: Empty string and empty pattern match
    dp[0][0] = true;

    // Fill the first row (when s is empty)
    for (let j = 1; j <= n; j++) {
        if (p[j - 1] === '*') {
            dp[0][j] = dp[0][j - 1]; // '*' can match empty sequence
        }
    }

    // Fill the DP table
    for (let i = 1; i <= m; i++) {
        for (let j = 1; j <= n; j++) {
            if (p[j - 1] === s[i - 1] || p[j - 1] === '?') {
                dp[i][j] = dp[i - 1][j - 1]; // Character match or '?' match
            } else if (p[j - 1] === '*') {
                dp[i][j] = dp[i - 1][j] || dp[i][j - 1]; // '*' can match empty or previous character
            }
        }
    }

    return dp[m][n];
};

// Example test cases
console.log(isMatch("aa", "a")); // Output: false
console.log(isMatch("aa", "*")); // Output: true
console.log(isMatch("cb", "?a")); // Output: false
console.log(isMatch("adceb", "*a*b")); // Output: true
console.log(isMatch("acdcb", "a*c?b")); // Output: false
